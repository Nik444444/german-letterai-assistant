import re
from typing import Dict, Any, List

def format_analysis_text(raw_text: str) -> Dict[str, Any]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—ã—Ä–æ–π —Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ –∫—Ä–∞—Å–∏–≤—ã–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    –£–±–∏—Ä–∞–µ—Ç —Å–∏–º–≤–æ–ª—ã "*" –∏ —Å–æ–∑–¥–∞–µ—Ç —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
    """
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    cleaned_text = raw_text.replace('*', '').replace('#', '').strip()
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–µ–∫—Ü–∏–∏
    sections = {}
    current_section = "intro"
    current_content = []
    
    lines = cleaned_text.split('\n')
    
    for line in lines:
        line = line.strip()
        if not line:
            continue
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–∫—Ü–∏–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        lower_line = line.lower()
        
        if any(keyword in lower_line for keyword in ['—Ä–µ–∑—é–º–µ', 'summary', '–∫—Ä–∞—Ç–∫–æ–µ', 'suummary']):
            if current_content:
                sections[current_section] = '\n'.join(current_content)
            current_section = "summary"
            current_content = []
        elif any(keyword in lower_line for keyword in ['–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å', 'sender', '–æ—Ç –∫–æ–≥–æ']):
            if current_content:
                sections[current_section] = '\n'.join(current_content)
            current_section = "sender"
            current_content = []
        elif any(keyword in lower_line for keyword in ['—Ç–∏–ø –ø–∏—Å—å–º–∞', 'type', '–∫–∞—Ç–µ–≥–æ—Ä–∏—è']):
            if current_content:
                sections[current_section] = '\n'.join(current_content)
            current_section = "type"
            current_content = []
        elif any(keyword in lower_line for keyword in ['—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ', 'content', '–æ—Å–Ω–æ–≤–Ω–æ–µ']):
            if current_content:
                sections[current_section] = '\n'.join(current_content)
            current_section = "content"
            current_content = []
        elif any(keyword in lower_line for keyword in ['–¥–µ–π—Å—Ç–≤–∏—è', 'actions', '—Ç—Ä–µ–±—É–µ–º—ã–µ']):
            if current_content:
                sections[current_section] = '\n'.join(current_content)
            current_section = "actions"
            current_content = []
        elif any(keyword in lower_line for keyword in ['—Å—Ä–æ–∫–∏', 'deadline', '–¥–∞—Ç–∞']):
            if current_content:
                sections[current_section] = '\n'.join(current_content)
            current_section = "deadlines"
            current_content = []
        elif any(keyword in lower_line for keyword in ['–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è', 'consequences', '–µ—Å–ª–∏ –Ω–µ']):
            if current_content:
                sections[current_section] = '\n'.join(current_content)
            current_section = "consequences"
            current_content = []
        elif any(keyword in lower_line for keyword in ['—Å—Ä–æ—á–Ω–æ—Å—Ç—å', 'urgency', '–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç', '–≤–∞–∂–Ω–æ—Å—Ç—å']):
            if current_content:
                sections[current_section] = '\n'.join(current_content)
            current_section = "urgency"
            current_content = []
        elif any(keyword in lower_line for keyword in ['—à–∞–±–ª–æ–Ω', 'template', '–æ—Ç–≤–µ—Ç']):
            if current_content:
                sections[current_section] = '\n'.join(current_content)
            current_section = "template"
            current_content = []
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
            if not any(char.isdigit() for char in line[:3]) or len(line) > 5:
                current_content.append(line)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ–∫—Ü–∏—é
    if current_content:
        sections[current_section] = '\n'.join(current_content)
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    formatted_result = {
        "main_content": sections.get("summary", sections.get("intro", "")).strip(),
        "sender_info": sections.get("sender", "").strip(),
        "document_type": sections.get("type", "").strip(),
        "key_content": sections.get("content", "").strip(),
        "required_actions": sections.get("actions", "").strip(),
        "deadlines": sections.get("deadlines", "").strip(),
        "consequences": sections.get("consequences", "").strip(),
        "urgency_level": extract_urgency_level(sections.get("urgency", "")),
        "response_template": sections.get("template", "").strip(),
        "full_analysis": create_beautiful_full_text(sections),
        "formatted_sections": format_sections_for_display(sections)
    }
    
    return formatted_result

def extract_urgency_level(urgency_text: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    if not urgency_text:
        return "–°–†–ï–î–ù–ò–ô"
    
    urgency_lower = urgency_text.lower()
    
    if any(keyword in urgency_lower for keyword in ['–≤—ã—Å–æ–∫–∏–π', '—Å—Ä–æ—á–Ω–æ', '–∫—Ä–∏—Ç–∏—á–Ω', '–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ', 'high', 'urgent', 'critical']):
        return "–í–´–°–û–ö–ò–ô"
    elif any(keyword in urgency_lower for keyword in ['–Ω–∏–∑–∫–∏–π', '–Ω–µ—Å—Ä–æ—á–Ω–æ', '–º–æ–∂–µ—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å', 'low', 'not urgent']):
        return "–ù–ò–ó–ö–ò–ô"
    else:
        return "–°–†–ï–î–ù–ò–ô"

def create_beautiful_full_text(sections: Dict[str, str]) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞"""
    beautiful_text = ""
    
    section_titles = {
        "intro": "üìã –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        "summary": "üìù –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ",
        "sender": "üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ", 
        "type": "üìã –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞",
        "content": "üìÑ –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ",
        "actions": "‚ö° –¢—Ä–µ–±—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è",
        "deadlines": "üìÖ –í–∞–∂–Ω—ã–µ —Å—Ä–æ–∫–∏",
        "consequences": "‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è",
        "urgency": "üö® –£—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏",
        "template": "üì® –®–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞"
    }
    
    for section_key, content in sections.items():
        if content.strip():
            title = section_titles.get(section_key, f"üìå {section_key.title()}")
            beautiful_text += f"\n{title}\n"
            beautiful_text += "‚îÄ" * 40 + "\n"
            beautiful_text += f"{content.strip()}\n\n"
    
    return beautiful_text.strip()

def format_sections_for_display(sections: Dict[str, str]) -> List[Dict[str, Any]]:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–µ–∫—Ü–∏–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI"""
    display_sections = []
    
    section_config = {
        "summary": {
            "title": "–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ",
            "icon": "üìù",
            "color": "blue",
            "priority": 1
        },
        "sender": {
            "title": "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å",
            "icon": "üë§", 
            "color": "gray",
            "priority": 2
        },
        "type": {
            "title": "–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞",
            "icon": "üìã",
            "color": "purple",
            "priority": 3
        },
        "content": {
            "title": "–û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ",
            "icon": "üìÑ",
            "color": "green",
            "priority": 4
        },
        "actions": {
            "title": "–¢—Ä–µ–±—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è",
            "icon": "‚ö°",
            "color": "orange",
            "priority": 5
        },
        "deadlines": {
            "title": "–í–∞–∂–Ω—ã–µ —Å—Ä–æ–∫–∏",
            "icon": "üìÖ",
            "color": "red",
            "priority": 6
        },
        "consequences": {
            "title": "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è",
            "icon": "‚ö†Ô∏è",
            "color": "yellow",
            "priority": 7
        },
        "urgency": {
            "title": "–£—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏",
            "icon": "üö®",
            "color": "red",
            "priority": 8
        }
    }
    
    for section_key, content in sections.items():
        if content.strip() and section_key in section_config:
            config = section_config[section_key]
            display_sections.append({
                "key": section_key,
                "title": config["title"],
                "icon": config["icon"],
                "color": config["color"],
                "priority": config["priority"],
                "content": content.strip()
            })
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    display_sections.sort(key=lambda x: x["priority"])
    
    return display_sections

def create_improved_analysis_prompt(language: str, filename: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å –ª—É—á—à–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    language_prompts = {
        "en": "Analyze this German official letter and provide a structured response in English.",
        "ru": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —ç—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–µ–º–µ—Ü–∫–æ–µ –ø–∏—Å—å–º–æ –∏ –¥–∞–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.",
        "de": "Analysieren Sie diesen deutschen offiziellen Brief und geben Sie eine strukturierte Antwort auf Deutsch."
    }

    base_prompt = language_prompts.get(language, language_prompts["ru"])

    return f"""{base_prompt}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ –ë–ï–ó –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (* # –∏ –¥—Ä—É–≥–∏—Ö):

–ö–†–ê–¢–ö–û–ï –†–ï–ó–Æ–ú–ï
–î–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –ø–∏—Å—å–º–∞ –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –û–¢–ü–†–ê–í–ò–¢–ï–õ–ï  
–£–∫–∞–∂–∏—Ç–µ –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–∏—Å—å–º–æ (–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç, –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ).

–¢–ò–ü –ü–ò–°–¨–ú–ê
–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, —Å–ø—Ä–∞–≤–∫–∞ –∏ —Ç.–¥.).

–û–°–ù–û–í–ù–û–ï –°–û–î–ï–†–ñ–ê–ù–ò–ï
–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –æ —á–µ–º –≥–æ–≤–æ—Ä–∏—Ç—Å—è –≤ –ø–∏—Å—å–º–µ, –∫–∞–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è.

–¢–†–ï–ë–£–ï–ú–´–ï –î–ï–ô–°–¢–í–ò–Ø
–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –∫–∞–∫–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Ç—Ä–µ–±—É—é—Ç—Å—è –æ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–∏—Å—å–º–∞.

–í–ê–ñ–ù–´–ï –°–†–û–ö–ò
–£–∫–∞–∂–∏—Ç–µ –≤—Å–µ —É–ø–æ–º—è–Ω—É—Ç—ã–µ –¥–∞—Ç—ã, —Å—Ä–æ–∫–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏.

–í–û–ó–ú–û–ñ–ù–´–ï –ü–û–°–õ–ï–î–°–¢–í–ò–Ø
–û–ø–∏—à–∏—Ç–µ —á—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å —Ç—Ä–µ–±—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.

–£–†–û–í–ï–ù–¨ –°–†–û–ß–ù–û–°–¢–ò
–û—Ü–µ–Ω–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –∫–∞–∫ –ù–ò–ó–ö–ò–ô, –°–†–ï–î–ù–ò–ô –∏–ª–∏ –í–´–°–û–ö–ò–ô.

–®–ê–ë–õ–û–ù –û–¢–í–ï–¢–ê
–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –≤–µ–∂–ª–∏–≤—ã–π —à–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º —è–∑—ã–∫–µ.

–§–∞–π–ª: {filename}

–í–∞–∂–Ω–æ: –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–º–≤–æ–ª—ã *, #, _, ** –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–∏—à–∏—Ç–µ –ø—Ä–æ—Å—Ç—ã–º —á–∏—Ç–∞–µ–º—ã–º —Ç–µ–∫—Å—Ç–æ–º."""