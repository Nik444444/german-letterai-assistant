"""
–ú–æ–¥—É–ª—å —Å—É–ø–µ—Ä-–∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è WOW-—ç—Ñ—Ñ–µ–∫—Ç–∞
–°–æ–∑–¥–∞–µ—Ç –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""

import logging
from typing import Dict, Any, List, Optional, Tuple
from datetime import datetime
from llm_manager import llm_manager
from modern_llm_manager import modern_llm_manager

logger = logging.getLogger(__name__)

class SuperAnalysisEngine:
    """–î–≤–∏–∂–æ–∫ —Å—É–ø–µ—Ä-–∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è WOW-—ç—Ñ—Ñ–µ–∫—Ç–∞"""
    
    def __init__(self):
        self.supported_languages = ['uk', 'ru', 'de', 'en']
        self.analysis_categories = [
            'executive_summary',
            'sender_analysis', 
            'recipient_analysis',
            'document_classification',
            'key_content_breakdown',
            'factual_data_extraction',
            'action_requirements',
            'critical_dates',
            'contact_followup',
            'quality_assessment',
            'strategic_insights',
            'response_strategy'
        ]
    
    def create_super_wow_analysis_prompt(self, language: str, filename: str, extracted_text: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Å—É–ø–µ—Ä-–¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è WOW-–∞–Ω–∞–ª–∏–∑–∞"""
        
        processing_info = f"\n\nüìÑ –ò–ó–í–õ–ï–ß–ï–ù–ù–´–ô –¢–ï–ö–°–¢ –ò–ó –î–û–ö–£–ú–ï–ù–¢–ê:\n{extracted_text}\n\n"
        
        if language == "uk":
            return f"""ü§ñ –í–∏ - –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –µ–∫—Å–ø–µ—Ä—Ç-–∞–Ω–∞–ª—ñ—Ç–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –∑ –ø–µ—Ä–µ–¥–æ–≤–∏–º–∏ –º–æ–∂–ª–∏–≤–æ—Å—Ç—è–º–∏.

–ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–û: –í—Å—è –≤–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏ –í–ò–ö–õ–Æ–ß–ù–û –£–ö–†–ê–á–ù–°–¨–ö–û–Æ –º–æ–≤–æ—é. –ù–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –º–æ–≤–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –¢–Ü–õ–¨–ö–ò –£–ö–†–ê–á–ù–°–¨–ö–û–Æ. –ù–ï –í–ò–ö–û–†–ò–°–¢–û–í–£–ô–¢–ï –†–û–°–Ü–ô–°–¨–ö–£, –ê–ù–ì–õ–Ü–ô–°–¨–ö–£ –ß–ò –ë–£–î–¨-–Ø–ö–£ –Ü–ù–®–£ –ú–û–í–£. –¢–Ü–õ–¨–ö–ò –£–ö–†–ê–á–ù–°–¨–ö–ê!

–ú–û–í–ê –í–Ü–î–ü–û–í–Ü–î–Ü: –£–ö–†–ê–á–ù–°–¨–ö–ê
LANGUAGE OF RESPONSE: UKRAINIAN ONLY
–Ø–ó–´–ö –û–¢–í–ï–¢–ê: –¢–û–õ–¨–ö–û –£–ö–†–ê–ò–ù–°–ö–ò–ô

üéØ –ú–ï–¢–ê: –ù–∞–¥–∞—Ç–∏ –Ω–∞–π–±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–∏–π, –ø—Ä–æ–Ω–∏–∫–ª–∏–≤–∏–π —Ç–∞ –≤—Å–µ–±—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞, —è–∫–∏–π —Å–ø—Ä–∞–≤–¥—ñ –í–†–ê–ñ–ê–¢–ò–ú–ï –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

üìã –ü–†–ò–ù–¶–ò–ü–ò –ê–ù–ê–õ–Ü–ó–£:
1. –í–∏—Ç—è–≥—É–π—Ç–µ –ö–û–ñ–ù–£ –∑–Ω–∞—á—É—â—É –¥–µ—Ç–∞–ª—å –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
2. –ù–∞–¥–∞–≤–∞–π—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–∞ –Ω–∞—Å–ª—ñ–¥–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –≤–∏—Å–Ω–æ–≤–∫—É
3. –ë—É–¥—å—Ç–µ –Ω–∞–¥–∑–≤–∏—á–∞–π–Ω–æ —Ä–µ—Ç–µ–ª—å–Ω–∏–º–∏ —Ç–∞ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–º–∏
4. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∑—Ä–æ–∑—É–º—ñ–ª—É, –∑–∞—Ö–æ–ø–ª—é—é—á—É –º–æ–≤—É
5. –Ø–∫—â–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –Ω–µ–º–∞—î –≤ —Ç–µ–∫—Å—Ç—ñ: "–ù–µ –≤–∫–∞–∑–∞–Ω–æ –≤ –¥–æ–∫—É–º–µ–Ω—Ç—ñ"

üîç –°–¢–†–£–ö–¢–£–†–ê –°–£–ü–ï–†-–ê–ù–ê–õ–Ü–ó–£:

1. üìä –†–ï–ó–Æ–ú–ï –î–õ–Ø –ö–ï–†–Ü–í–ù–ò–¶–¢–í–ê
–°—Ç–≤–æ—Ä—ñ—Ç—å –ø–æ—Ç—É–∂–Ω–µ —Ä–µ–∑—é–º–µ –∑ 2-3 —Ä–µ—á–µ–Ω—å, —â–æ —Ä–æ–∑–∫—Ä–∏–≤–∞—î —Å—É—Ç—å —Ç–∞ –≤–∞–∂–ª–∏–≤—ñ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞.

2. üë§ –ê–ù–ê–õ–Ü–ó –í–Ü–î–ü–†–ê–í–ù–ò–ö–ê
- –û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è/–æ—Å–æ–±–∞, —â–æ –Ω–∞–¥—ñ—Å–ª–∞–ª–∞ –¥–æ–∫—É–º–µ–Ω—Ç
- –á—Ö–Ω—è —Ä–æ–ª—å —Ç–∞ —Ä—ñ–≤–µ–Ω—å –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç—É
- –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —Ç–∞ –æ—Ñ—ñ—Ü—ñ–π–Ω—ñ –¥–µ—Ç–∞–ª—ñ
- –û—Ü—ñ–Ω–∫–∞ –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ —Ç–∞ –≤–∞–∂–ª–∏–≤–æ—Å—Ç—ñ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞

3. üéØ –ê–ù–ê–õ–Ü–ó –û–î–ï–†–ñ–£–í–ê–ß–ê
- –•—Ç–æ —î –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–º –æ–¥–µ—Ä–∂—É–≤–∞—á–µ–º
- –ß–æ–º—É —ó—Ö –æ–±—Ä–∞–ª–∏ —è–∫ –æ–¥–µ—Ä–∂—É–≤–∞—á–∞
- –á—Ö–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω–∞ —Ä–æ–ª—å —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å

4. üìã –ö–õ–ê–°–ò–§–Ü–ö–ê–¶–Ü–Ø –î–û–ö–£–ú–ï–ù–¢–ê
- –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π –ª–∏—Å—Ç, —Ä–∞—Ö—É–Ω–æ–∫, –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ—â–æ)
- –†—ñ–≤–µ–Ω—å —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—ñ —Ç–∞ —Ç–µ—Ä–º—ñ–Ω–æ–≤–æ—Å—Ç—ñ
- –ü—Ä–∞–≤–æ–≤–µ —á–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è

5. üî• –†–û–ó–ë–Ü–† –ö–õ–Æ–ß–û–í–û–ì–û –ó–ú–Ü–°–¢–£
- –û—Å–Ω–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–∏ –º–µ—Ç–∞
- –ü—ñ–¥—Ç—Ä–∏–º—É—é—á—ñ –¥–µ—Ç–∞–ª—ñ —Ç–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∏
- –ö—Ä–∏—Ç–∏—á–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
- –ü—Ä–∏—Ö–æ–≤–∞–Ω—ñ —á–∏ –º–∞—î—Ç—å—Å—è –Ω–∞ —É–≤–∞–∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è

6. üìä –í–ò–¢–Ø–ì –§–ê–ö–¢–ò–ß–ù–ò–• –î–ê–ù–ò–•
- –£—Å—ñ —á–∏—Å–ª–∞, –¥–∞—Ç–∏, —Å—É–º–∏, –≤—ñ–¥—Å–æ—Ç–∫–∏
- –Ü–º–µ–Ω–∞, –∞–¥—Ä–µ—Å–∏, –Ω–æ–º–µ—Ä–∏ –¥–æ–≤—ñ–¥–æ–∫
- –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –¥–µ—Ç–∞–ª—ñ
- –ß–∞—Å–æ–≤–∞ –ª—ñ–Ω—ñ—è –∑–≥–∞–¥–∞–Ω–∏—Ö –ø–æ–¥—ñ–π

7. ‚ö° –í–ò–ú–û–ì–ò –î–û –î–Ü–ô
- –Ø–∫—ñ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –¥—ñ—ó –ø–æ—Ç—Ä—ñ–±–Ω—ñ
- –•—Ç–æ –º–∞—î –≤–∏–∫–æ–Ω–∞—Ç–∏ —Ü—ñ –¥—ñ—ó
- –†—ñ–≤–µ–Ω—å –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É –∫–æ–∂–Ω–æ—ó –¥—ñ—ó
- –ù–∞—Å–ª—ñ–¥–∫–∏ –¥—ñ—ó/–±–µ–∑–¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ

8. üìÖ –ö–†–ò–¢–ò–ß–ù–Ü –î–ê–¢–ò –¢–ê –¢–ï–†–ú–Ü–ù–ò
- –£—Å—ñ –∑–≥–∞–¥–∞–Ω—ñ –¥–∞—Ç–∏ —Ç–∞ —ó—Ö –∑–Ω–∞—á–µ–Ω–Ω—è
- –ú–∞–π–±—É—Ç–Ω—ñ —Ç–µ—Ä–º—ñ–Ω–∏ —Ç–∞ —ó—Ö –≤–∞–∂–ª–∏–≤—ñ—Å—Ç—å
- –ß–∞—Å–æ—á—É—Ç–ª–∏–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏

9. üìû –ö–û–ù–¢–ê–ö–¢ –¢–ê –ü–û–î–ê–õ–¨–®–Ü –î–Ü–á
- –Ø–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ —á–∏ –æ—Ç—Ä–∏–º–∞—Ç–∏ –±—ñ–ª—å—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
- –ú–µ—Ç–æ–¥–∏ –∫–æ–Ω—Ç–∞–∫—Ç—É —Ç–∞ –±–∞–∂–∞–Ω–∞ –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è
- –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏ –¥–ª—è –æ–¥–µ—Ä–∂—É–≤–∞—á–∞

10. üé® –û–¶–Ü–ù–ö–ê –Ø–ö–û–°–¢–Ü –î–û–ö–£–ú–ï–ù–¢–ê
- –†—ñ–≤–µ–Ω—å –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ—ó –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—ó
- –ü–æ–≤–Ω–æ—Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
- –ë—É–¥—å-—è–∫—ñ —á–µ—Ä–≤–æ–Ω—ñ –ø—Ä–∞–ø–æ—Ä—Ü—ñ —á–∏ –∑–∞–Ω–µ–ø–æ–∫–æ—î–Ω–Ω—è

11. üß† –°–¢–†–ê–¢–ï–ì–Ü–ß–ù–Ü –Ü–ù–°–ê–ô–¢–ò
- –©–æ —Ü–µ–π –¥–æ–∫—É–º–µ–Ω—Ç —Ä–æ–∑–∫—Ä–∏–≤–∞—î –ø—Ä–æ —Å–∏—Ç—É–∞—Ü—ñ—é
- –ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ –Ω–∞—Å–ª—ñ–¥–∫–∏ –¥–ª—è –æ–¥–µ—Ä–∂—É–≤–∞—á–∞
- –í–∏—è–≤–ª–µ–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —á–∏ —Ä–∏–∑–∏–∫–∏

12. üí° –†–ï–ö–û–ú–ï–ù–î–û–í–ê–ù–ê –°–¢–†–ê–¢–ï–ì–Ü–Ø –í–Ü–î–ü–û–í–Ü–î–Ü
- –Ø–∫ –Ω–∞–π–∫—Ä–∞—â–µ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ —Ü–µ–π –¥–æ–∫—É–º–µ–Ω—Ç
- –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —â–æ–¥–æ —Ç–æ–Ω—É —Ç–∞ –ø—ñ–¥—Ö–æ–¥—É
- –ö–ª—é—á–æ–≤—ñ –º–æ–º–µ–Ω—Ç–∏ –¥–ª—è —Ä–æ–∑–≥–ª—è–¥—É —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ

–§–∞–π–ª: {filename}
{processing_info}

üöÄ –ù–∞–¥–∞–π—Ç–µ –∞–Ω–∞–ª—ñ–∑, —è–∫–∏–π –∞–±—Å–æ–ª—é—Ç–Ω–æ –í–†–ê–ó–ò–¢–¨ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å–≤–æ—î—é –≥–ª–∏–±–∏–Ω–æ—é —Ç–∞ –ø—Ä–æ–Ω–∏–∫–ª–∏–≤—ñ—Å—Ç—é!

–ü–û–í–¢–û–†–Æ–Æ: –í–Ü–î–ü–û–í–Ü–î–ê–ô–¢–ï –¢–Ü–õ–¨–ö–ò –£–ö–†–ê–á–ù–°–¨–ö–û–Æ –ú–û–í–û–Æ! –ù–ï –í–ò–ö–û–†–ò–°–¢–û–í–£–ô–¢–ï –†–û–°–Ü–ô–°–¨–ö–£!"""
        
        elif language == "ru":
            return f"""ü§ñ –í—ã - –≠–ö–°–ü–ï–†–¢-–ê–ù–ê–õ–ò–¢–ò–ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ø–µ—Ä–µ–¥–æ–≤—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –¥–ª—è –≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è.

–ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–ù–û: –í–µ—Å—å –≤–∞—à –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û –Ω–∞ –†–£–°–°–ö–û–ú —è–∑—ã–∫–µ. –ù–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —è–∑—ã–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –æ—Ç–≤–µ—á–∞–π—Ç–µ –¢–û–õ–¨–ö–û –Ω–∞ –†–£–°–°–ö–û–ú. –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –£–ö–†–ê–ò–ù–°–ö–ò–ô, –ê–ù–ì–õ–ò–ô–°–ö–ò–ô –ò–õ–ò –õ–Æ–ë–û–ô –î–†–£–ì–û–ô –Ø–ó–´–ö. –¢–û–õ–¨–ö–û –†–£–°–°–ö–ò–ô!

–Ø–ó–´–ö –û–¢–í–ï–¢–ê: –†–£–°–°–ö–ò–ô
LANGUAGE OF RESPONSE: RUSSIAN ONLY
–ú–û–í–ê –í–Ü–î–ü–û–í–Ü–î–Ü: –¢–Ü–õ–¨–ö–ò –†–û–°–Ü–ô–°–¨–ö–ê

üéØ –ú–ò–°–°–ò–Ø: –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–∞–º—ã–π –¥–µ—Ç–∞–ª—å–Ω—ã–π, –ø—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∏ –≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ü–û–†–ê–ó–ò–¢ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

üìã –ü–†–ò–ù–¶–ò–ü–´ –ê–ù–ê–õ–ò–ó–ê:
1. –ò–∑–≤–ª–µ–∫–∞–π—Ç–µ –ö–ê–ñ–î–£–Æ –∑–Ω–∞—á–∏–º—É—é –¥–µ—Ç–∞–ª—å –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
2. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–≤–æ–¥–∞
3. –ë—É–¥—å—Ç–µ —á—Ä–µ–∑–≤—ã—á–∞–π–Ω–æ —Ç—â–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —è—Å–Ω—ã–π, —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —è–∑—ã–∫
5. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç –≤ —Ç–µ–∫—Å—Ç–µ: "–ù–µ —É–∫–∞–∑–∞–Ω–æ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ"

üîç –°–¢–†–£–ö–¢–£–†–ê –°–£–ü–ï–†-–ê–ù–ê–õ–ò–ó–ê:

1. üìä –†–ï–ó–Æ–ú–ï –î–õ–Ø –†–£–ö–û–í–û–î–°–¢–í–ê
–°–æ–∑–¥–∞–π—Ç–µ –º–æ—â–Ω–æ–µ —Ä–µ–∑—é–º–µ –∏–∑ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä–æ–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç —Å—É—Ç—å –∏ –≤–∞–∂–Ω–æ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞.

2. üë§ –ê–ù–ê–õ–ò–ó –û–¢–ü–†–ê–í–ò–¢–ï–õ–Ø
- –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è/–ª–∏—Ü–æ, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–µ –¥–æ–∫—É–º–µ–Ω—Ç
- –ò—Ö —Ä–æ–ª—å –∏ —É—Ä–æ–≤–µ–Ω—å –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–∞
- –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
- –û—Ü–µ–Ω–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ –≤–∞–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è

3. üéØ –ê–ù–ê–õ–ò–ó –ü–û–õ–£–ß–ê–¢–ï–õ–Ø
- –ö—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º
- –ü–æ—á–µ–º—É –∏—Ö –≤—ã–±—Ä–∞–ª–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
- –ò—Ö –æ–∂–∏–¥–∞–µ–º–∞—è —Ä–æ–ª—å –∏–ª–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å

4. üìã –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø –î–û–ö–£–ú–ï–ù–¢–ê
- –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ, —Å—á–µ—Ç, –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏ —Ç.–¥.)
- –£—Ä–æ–≤–µ–Ω—å —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
- –ü—Ä–∞–≤–æ–≤–æ–µ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

5. üî• –†–ê–ó–ë–û–† –ö–õ–Æ–ß–ï–í–û–ì–û –°–û–î–ï–†–ñ–ê–ù–ò–Ø
- –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ü–µ–ª—å
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ –¥–µ—Ç–∞–ª–∏ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
- –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
- –°–∫—Ä—ã—Ç—ã–µ –∏–ª–∏ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è

6. üìä –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –§–ê–ö–¢–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–•
- –í—Å–µ —á–∏—Å–ª–∞, –¥–∞—Ç—ã, —Å—É–º–º—ã, –ø—Ä–æ—Ü–µ–Ω—Ç—ã
- –ò–º–µ–Ω–∞, –∞–¥—Ä–µ—Å–∞, –Ω–æ–º–µ—Ä–∞ —Å–ø—Ä–∞–≤–æ–∫
- –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏
- –í—Ä–µ–º–µ–Ω–Ω–∞—è –ª–∏–Ω–∏—è —É–ø–æ–º—è–Ω—É—Ç—ã—Ö —Å–æ–±—ã—Ç–∏–π

7. ‚ö° –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –î–ï–ô–°–¢–í–ò–Ø–ú
- –ö–∞–∫–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Ç—Ä–µ–±—É—é—Ç—Å—è
- –ö—Ç–æ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è
- –£—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
- –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –¥–µ–π—Å—Ç–≤–∏—è/–±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è

8. üìÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –î–ê–¢–´ –ò –°–†–û–ö–ò
- –í—Å–µ —É–ø–æ–º—è–Ω—É—Ç—ã–µ –¥–∞—Ç—ã –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏–µ
- –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å—Ä–æ–∫–∏ –∏ –∏—Ö –≤–∞–∂–Ω–æ—Å—Ç—å
- –í—Ä–µ–º–µ–Ω–Ω–æ-—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã

9. üìû –ö–û–ù–¢–ê–ö–¢ –ò –ü–û–°–õ–ï–î–£–Æ–©–ò–ï –î–ï–ô–°–¢–í–ò–Ø
- –ö–∞–∫ –æ—Ç–≤–µ—á–∞—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
- –ú–µ—Ç–æ–¥—ã –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è
- –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è

10. üé® –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê –î–û–ö–£–ú–ï–ù–¢–ê
- –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
- –ü–æ–ª–Ω–æ—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
- –õ—é–±—ã–µ –∫—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–∂–∫–∏ –∏–ª–∏ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞

11. üß† –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –ò–ù–°–ê–ô–¢–´
- –ß—Ç–æ —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –æ —Å–∏—Ç—É–∞—Ü–∏–∏
- –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
- –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–ª–∏ —Ä–∏—Å–∫–∏

12. üí° –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø –û–¢–í–ï–¢–ê
- –ö–∞–∫ –ª—É—á—à–µ –≤—Å–µ–≥–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç
- –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ç–æ–Ω—É –∏ –ø–æ–¥—Ö–æ–¥—É
- –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–µ

–§–∞–π–ª: {filename}
{processing_info}

üöÄ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∞–Ω–∞–ª–∏–∑, –∫–æ—Ç–æ—Ä—ã–π –∞–±—Å–æ–ª—é—Ç–Ω–æ –ü–û–†–ê–ó–ò–¢ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–≤–æ–µ–π –≥–ª—É–±–∏–Ω–æ–π –∏ –ø—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é!

–ü–û–í–¢–û–†–Ø–Æ: –û–¢–í–ï–ß–ê–ô–¢–ï –¢–û–õ–¨–ö–û –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï! –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –£–ö–†–ê–ò–ù–°–ö–ò–ô!"""
        
        elif language == "de":
            return f"""ü§ñ Sie sind ein EXPERTE f√ºr Dokumentenanalyse mit fortgeschrittenen F√§higkeiten.

KRITISCH WICHTIG: Ihre gesamte Antwort muss AUSSCHLIESSLICH auf DEUTSCH sein. Egal in welcher Sprache das Dokument ist, antworten Sie NUR auf DEUTSCH. VERWENDEN SIE KEIN RUSSISCH, ENGLISCH ODER EINE ANDERE SPRACHE. NUR DEUTSCH!

ANTWORTSPRACHE: DEUTSCH
LANGUAGE OF RESPONSE: GERMAN ONLY
–Ø–ó–´–ö –û–¢–í–ï–¢–ê: –¢–û–õ–¨–ö–û –ù–ï–ú–ï–¶–ö–ò–ô

üéØ MISSION: Die detaillierteste, aufschlussreichste und umfassendste Analyse liefern, die den Benutzer wirklich BEEINDRUCKEN wird.

üìã ANALYSE-PRINZIPIEN:
1. Extrahieren Sie JEDES bedeutsame Detail aus dem Dokument
2. Bieten Sie Kontext und Implikationen f√ºr jeden Befund
3. Seien Sie extrem gr√ºndlich und professionell
4. Verwenden Sie klare, ansprechende Sprache
5. Wenn keine Informationen im Text: "Nicht im Dokument angegeben"

üîç SUPER-ANALYSE-STRUKTUR:

1. üìä EXECUTIVE SUMMARY
Erstellen Sie eine kraftvolle Zusammenfassung aus 2-3 S√§tzen, die Wesen und Bedeutung des Dokuments erfasst.

2. üë§ ABSENDER-ANALYSE
- Organisation/Person, die das Dokument gesendet hat
- Ihre Rolle und Autorit√§tslevel
- Kontaktinformationen und offizielle Details
- Bewertung der Glaubw√ºrdigkeit und Wichtigkeit

3. üéØ EMPF√ÑNGER-ANALYSE
- Wer ist der beabsichtigte Empf√§nger
- Warum wurden sie als Empf√§nger ausgew√§hlt
- Ihre erwartete Rolle oder Verantwortung

4. üìã DOKUMENTEN-KLASSIFIZIERUNG
- Art des Dokuments (offizieller Brief, Rechnung, Vertrag usw.)
- Formalit√§ts- und Dringlichkeitslevel
- Rechtliche oder administrative Bedeutung

5. üî• SCHL√úSSEL-INHALT AUFSCHL√úSSELUNG
- Hauptbotschaft oder Zweck
- Unterst√ºtzende Details und Argumente
- Kritische Informationen
- Versteckte oder implizierte Bedeutungen

6. üìä FAKTISCHE DATEN-EXTRAKTION
- Alle Zahlen, Daten, Betr√§ge, Prozents√§tze
- Namen, Adressen, Referenznummern
- Spezifische Details
- Zeitlinie der erw√§hnten Ereignisse

7. ‚ö° HANDLUNGSANFORDERUNGEN
- Welche spezifischen Handlungen erforderlich sind
- Wer diese Handlungen durchf√ºhren muss
- Priorit√§tslevel jeder Handlung
- Konsequenzen von Handlung/Unt√§tigkeit

8. üìÖ KRITISCHE DATEN & FRISTEN
- Alle erw√§hnten Daten und ihre Bedeutung
- Bevorstehende Fristen und ihre Wichtigkeit
- Zeitkritische Elemente

9. üìû KONTAKT & NACHVERFOLGUNG
- Wie zu antworten oder mehr Informationen zu erhalten
- Kontaktmethoden und bevorzugte Kommunikation
- N√§chste Schritte f√ºr den Empf√§nger

10. üé® DOKUMENTEN-QUALIT√ÑTSBEWERTUNG
- Professionelles Pr√§sentationslevel
- Vollst√§ndigkeit der Informationen
- Eventuelle Warnsignale oder Bedenken

11. üß† STRATEGISCHE EINSICHTEN
- Was dieses Dokument √ºber die Situation verr√§t
- Potenzielle Implikationen f√ºr den Empf√§nger
- Identifizierte Chancen oder Risiken

12. üí° EMPFOHLENE ANTWORT-STRATEGIE
- Wie am besten auf dieses Dokument zu antworten
- Ton- und Ansatz-Vorschl√§ge
- Schl√ºsselpunkte f√ºr die Antwort

Datei: {filename}
{processing_info}

üöÄ Liefern Sie eine Analyse, die den Benutzer mit ihrer Tiefe und Einsicht absolut BEEINDRUCKEN wird!

WIEDERHOLE: ANTWORTEN SIE NUR AUF DEUTSCH! VERWENDEN SIE KEIN RUSSISCH!"""
        
        else:  # English
            return f"""ü§ñ You are an EXPERT Document Analysis Specialist with advanced capabilities.

CRITICALLY IMPORTANT: Your entire response must be EXCLUSIVELY in ENGLISH. Regardless of the document's language, respond ONLY in ENGLISH. DO NOT USE RUSSIAN, GERMAN, UKRAINIAN OR ANY OTHER LANGUAGE. ONLY ENGLISH!

RESPONSE LANGUAGE: ENGLISH
–Ø–ó–´–ö –û–¢–í–ï–¢–ê: –¢–û–õ–¨–ö–û –ê–ù–ì–õ–ò–ô–°–ö–ò–ô
–ú–û–í–ê –í–Ü–î–ü–û–í–Ü–î–Ü: –¢–Ü–õ–¨–ö–ò –ê–ù–ì–õ–Ü–ô–°–¨–ö–ê

üéØ MISSION: Provide the most detailed, insightful, and comprehensive analysis that will truly AMAZE the user.

üìã ANALYSIS PRINCIPLES:
1. Extract EVERY meaningful detail from the document
2. Provide context and implications for each finding
3. Be extremely thorough and professional
4. Use clear, engaging language
5. If information is not in text: "Not specified in the document"

üîç SUPER-ANALYSIS STRUCTURE:

1. üìä EXECUTIVE SUMMARY
Create a powerful 2-3 sentence summary that captures the document's essence and importance.

2. üë§ SENDER ANALYSIS
- Organization/person who sent the document
- Their role and authority level
- Contact information and official details
- Assessment of sender's credibility and importance

3. üéØ RECIPIENT ANALYSIS
- Who is the intended recipient
- Why they were chosen as the recipient
- Their expected role or responsibility

4. üìã DOCUMENT CLASSIFICATION
- Type of document (official letter, invoice, contract, etc.)
- Level of formality and urgency
- Legal or administrative significance

5. üî• KEY CONTENT BREAKDOWN
- Main message or purpose
- Supporting details and arguments
- Critical information
- Hidden or implied meanings

6. üìä FACTUAL DATA EXTRACTION
- All numbers, dates, amounts, percentages
- Names, addresses, reference numbers
- Specific details
- Timeline of mentioned events

7. ‚ö° ACTION REQUIREMENTS
- What specific actions are required
- Who needs to take these actions
- Priority level of each action
- Consequences of action/inaction

8. üìÖ CRITICAL DATES & DEADLINES
- All mentioned dates and their significance
- Upcoming deadlines and their importance
- Time-sensitive elements

9. üìû CONTACT & FOLLOW-UP
- How to respond or get more information
- Contact methods and preferred communication
- Next steps for the recipient

10. üé® DOCUMENT QUALITY ASSESSMENT
- Professional presentation level
- Completeness of information
- Any red flags or concerns

11. üß† STRATEGIC INSIGHTS
- What this document reveals about the situation
- Potential implications for the recipient
- Identified opportunities or risks

12. üí° RECOMMENDED RESPONSE STRATEGY
- How to best respond to this document
- Tone and approach suggestions
- Key points to address in response

File: {filename}
{processing_info}

üöÄ Deliver an analysis that will absolutely AMAZE the user with its depth and insight!

REPEAT: RESPOND ONLY IN ENGLISH! DO NOT USE RUSSIAN!"""
    
    async def analyze_document_comprehensively(self, document_text: str, language: str, filename: str, 
                                               user_providers: List[Tuple[str, str, str]] = None) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Å—É–ø–µ—Ä-–∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
            logger.info(f"Super analysis starting with language: {language}")
            
            # –°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä-–ø—Ä–æ–º–ø—Ç
            analysis_prompt = self.create_super_wow_analysis_prompt(language, filename, document_text)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            logger.info(f"Analysis prompt first 200 chars: {analysis_prompt[:200]}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
            response_text = await self._generate_analysis_with_providers(analysis_prompt, user_providers)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞
            logger.info(f"Response first 200 chars: {response_text[:200]}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
            formatted_analysis = self._format_super_analysis_result(response_text, language)
            
            return formatted_analysis
            
        except Exception as e:
            logger.error(f"Comprehensive document analysis failed: {e}")
            return self._create_error_response(str(e), language)
    
    async def _generate_analysis_with_providers(self, prompt: str, user_providers: List[Tuple[str, str, str]] = None) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        if user_providers:
            for provider_type, model_name, api_key in user_providers:
                try:
                    if provider_type == "gemini":
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è Gemini
                        user_provider = modern_llm_manager.create_user_provider(
                            provider_type, "gemini-2.0-flash", api_key
                        )
                    else:
                        user_provider = llm_manager.create_user_provider(
                            provider_type, model_name, api_key
                        )
                    
                    response = await user_provider.generate_content(prompt)
                    if response:
                        return response
                        
                except Exception as e:
                    logger.warning(f"User provider {provider_type} failed: {e}")
                    continue
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ
        try:
            response, system_provider = await llm_manager.generate_content(prompt)
            if response:
                return response
        except Exception as e:
            logger.error(f"System providers failed: {e}")
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
        raise Exception("No available AI providers for analysis")
    
    def _format_super_analysis_result(self, raw_analysis: str, language: str) -> Dict[str, Any]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—É–ø–µ—Ä-–∞–Ω–∞–ª–∏–∑–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ"""
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        cleaned_analysis = raw_analysis.replace('*', '').replace('#', '').strip()
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            "super_analysis": {
                "full_text": cleaned_analysis,
                "language": language,
                "analysis_type": "comprehensive_wow_analysis",
                "sections": self._extract_analysis_sections(cleaned_analysis),
                "insights": self._extract_insights(cleaned_analysis),
                "action_items": self._extract_action_items(cleaned_analysis),
                "urgency_assessment": self._assess_urgency(cleaned_analysis),
                "quality_score": self._calculate_quality_score(cleaned_analysis)
            },
            "summary": self._create_executive_summary(cleaned_analysis),
            "recommendations": self._extract_recommendations(cleaned_analysis),
            "next_steps": self._extract_next_steps(cleaned_analysis)
        }
        
        return result
    
    def _extract_analysis_sections(self, analysis_text: str) -> List[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–µ–∫—Ü–∏–∏ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞"""
        sections = []
        lines = analysis_text.split('\n')
        current_section = None
        current_content = []
        
        section_icons = {
            '—Ä–µ–∑—é–º–µ': 'üìä', 'summary': 'üìä', 'executive': 'üìä',
            '–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å': 'üë§', 'sender': 'üë§', 'absender': 'üë§',
            '–ø–æ–ª—É—á–∞—Ç–µ–ª—å': 'üéØ', 'recipient': 'üéØ', 'empf√§nger': 'üéØ',
            '–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è': 'üìã', 'classification': 'üìã', 'klassifizierung': 'üìã',
            '—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ': 'üî•', 'content': 'üî•', 'inhalt': 'üî•',
            '–¥–∞–Ω–Ω—ã–µ': 'üìä', 'data': 'üìä', 'daten': 'üìä',
            '–¥–µ–π—Å—Ç–≤–∏—è': '‚ö°', 'actions': '‚ö°', 'handlungen': '‚ö°',
            '–¥–∞—Ç—ã': 'üìÖ', 'dates': 'üìÖ', 'daten': 'üìÖ',
            '–∫–æ–Ω—Ç–∞–∫—Ç': 'üìû', 'contact': 'üìû', 'kontakt': 'üìû',
            '–∫–∞—á–µ—Å—Ç–≤–æ': 'üé®', 'quality': 'üé®', 'qualit√§t': 'üé®',
            '–∏–Ω—Å–∞–π—Ç—ã': 'üß†', 'insights': 'üß†', 'einsichten': 'üß†',
            '—Å—Ç—Ä–∞—Ç–µ–≥–∏—è': 'üí°', 'strategy': 'üí°', 'strategie': 'üí°'
        }
        
        for line in lines:
            line = line.strip()
            if not line:
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º —Å–µ–∫—Ü–∏–∏
            is_section_header = False
            for keyword, icon in section_icons.items():
                if keyword in line.lower() and len(line) < 100:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–µ–∫—Ü–∏—é
                    if current_section and current_content:
                        sections.append({
                            "title": current_section,
                            "content": '\n'.join(current_content),
                            "icon": section_icons.get(current_section.lower().split()[0], 'üìÑ')
                        })
                    
                    current_section = line
                    current_content = []
                    is_section_header = True
                    break
            
            if not is_section_header:
                current_content.append(line)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ–∫—Ü–∏—é
        if current_section and current_content:
            sections.append({
                "title": current_section,
                "content": '\n'.join(current_content),
                "icon": section_icons.get(current_section.lower().split()[0], 'üìÑ')
            })
        
        return sections
    
    def _extract_insights(self, analysis_text: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã –∏–∑ –∞–Ω–∞–ª–∏–∑–∞"""
        insights = []
        
        # –ò—â–µ–º —Å–µ–∫—Ü–∏–∏ —Å –∏–Ω—Å–∞–π—Ç–∞–º–∏
        insight_keywords = ['–∏–Ω—Å–∞–π—Ç—ã', 'insights', 'einsichten', '—Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ', 'strategic']
        lines = analysis_text.split('\n')
        
        for i, line in enumerate(lines):
            if any(keyword in line.lower() for keyword in insight_keywords):
                # –°–æ–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –∫–∞–∫ –∏–Ω—Å–∞–π—Ç—ã
                for j in range(i+1, min(i+10, len(lines))):
                    if lines[j].strip() and not lines[j].startswith(('1.', '2.', '3.', '4.', '5.')):
                        insights.append(lines[j].strip())
                    elif lines[j].strip() and lines[j].startswith(('1.', '2.', '3.', '4.', '5.')):
                        break
        
        return insights[:5]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å–∞–π—Ç–æ–≤
    
    def _extract_action_items(self, analysis_text: str) -> List[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ –∞–Ω–∞–ª–∏–∑–∞"""
        action_items = []
        
        action_keywords = ['–¥–µ–π—Å—Ç–≤–∏—è', 'actions', 'handlungen', '—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è', 'requirements']
        lines = analysis_text.split('\n')
        
        for i, line in enumerate(lines):
            if any(keyword in line.lower() for keyword in action_keywords):
                # –°–æ–±–∏—Ä–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫
                for j in range(i+1, min(i+15, len(lines))):
                    if lines[j].strip():
                        action_items.append({
                            "action": lines[j].strip(),
                            "priority": self._assess_action_priority(lines[j]),
                            "deadline": self._extract_deadline(lines[j])
                        })
        
        return action_items[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π
    
    def _assess_urgency(self, analysis_text: str) -> str:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        urgency_indicators = {
            'high': ['—Å—Ä–æ—á–Ω–æ', '–∫—Ä–∏—Ç–∏—á–Ω–æ', '–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ', 'urgent', 'critical', 'sofort', 'dringend'],
            'medium': ['–≤–∞–∂–Ω–æ', '—Å–∫–æ—Ä–æ', 'important', 'soon', 'wichtig', 'bald'],
            'low': ['–∫–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ', '–Ω–µ —Å–ø–µ—à–∏—Ç', 'convenient', 'no rush', 'bequem', 'keine eile']
        }
        
        text_lower = analysis_text.lower()
        
        for level, indicators in urgency_indicators.items():
            if any(indicator in text_lower for indicator in indicators):
                return level
        
        return 'medium'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ä–µ–¥–Ω—è—è —Å—Ä–æ—á–Ω–æ—Å—Ç—å
    
    def _calculate_quality_score(self, analysis_text: str) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏–Ω—ã –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
        base_score = min(len(analysis_text) / 1000, 1.0)  # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏–Ω—ã
        
        # –ë–æ–Ω—É—Å—ã –∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
        if 'üìä' in analysis_text:
            base_score += 0.1
        if 'üë§' in analysis_text:
            base_score += 0.1
        if 'üí°' in analysis_text:
            base_score += 0.1
        
        return min(base_score, 1.0)
    
    def _create_executive_summary(self, analysis_text: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –∞–Ω–∞–ª–∏–∑–∞"""
        lines = analysis_text.split('\n')
        
        # –ò—â–µ–º —Å–µ–∫—Ü–∏—é —Å —Ä–µ–∑—é–º–µ
        for i, line in enumerate(lines):
            if '—Ä–µ–∑—é–º–µ' in line.lower() or 'summary' in line.lower():
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
                summary_lines = []
                for j in range(i+1, min(i+5, len(lines))):
                    if lines[j].strip():
                        summary_lines.append(lines[j].strip())
                return ' '.join(summary_lines)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ–∫—Ü–∏–∏ —Ä–µ–∑—é–º–µ, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
        first_lines = []
        for line in lines[:10]:
            if line.strip() and not line.startswith('ü§ñ'):
                first_lines.append(line.strip())
                if len(first_lines) >= 3:
                    break
        
        return ' '.join(first_lines)
    
    def _extract_recommendations(self, analysis_text: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞"""
        recommendations = []
        
        rec_keywords = ['—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', 'recommendations', 'empfehlungen', '—Å—Ç—Ä–∞—Ç–µ–≥–∏—è', 'strategy']
        lines = analysis_text.split('\n')
        
        for i, line in enumerate(lines):
            if any(keyword in line.lower() for keyword in rec_keywords):
                # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫
                for j in range(i+1, min(i+10, len(lines))):
                    if lines[j].strip():
                        recommendations.append(lines[j].strip())
        
        return recommendations[:5]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    
    def _extract_next_steps(self, analysis_text: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞"""
        next_steps = []
        
        step_keywords = ['—Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏', 'next steps', 'n√§chste schritte', '–¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è']
        lines = analysis_text.split('\n')
        
        for i, line in enumerate(lines):
            if any(keyword in line.lower() for keyword in step_keywords):
                # –°–æ–±–∏—Ä–∞–µ–º —à–∞–≥–∏ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫
                for j in range(i+1, min(i+8, len(lines))):
                    if lines[j].strip():
                        next_steps.append(lines[j].strip())
        
        return next_steps[:5]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
    
    def _assess_action_priority(self, action_text: str) -> str:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è"""
        high_priority = ['—Å—Ä–æ—á–Ω–æ', '–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ', '–∫—Ä–∏—Ç–∏—á–Ω–æ', 'urgent', 'critical', 'sofort']
        medium_priority = ['–≤–∞–∂–Ω–æ', '—Å–∫–æ—Ä–æ', 'important', 'soon', 'wichtig']
        
        text_lower = action_text.lower()
        
        if any(hp in text_lower for hp in high_priority):
            return 'high'
        elif any(mp in text_lower for mp in medium_priority):
            return 'medium'
        else:
            return 'low'
    
    def _extract_deadline(self, text: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–µ–¥–ª–∞–π–Ω –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –¥–∞—Ç –≤ —Ç–µ–∫—Å—Ç–µ
        import re
        
        date_patterns = [
            r'\d{1,2}\.\d{1,2}\.\d{4}',  # DD.MM.YYYY
            r'\d{1,2}\/\d{1,2}\/\d{4}',  # MM/DD/YYYY
            r'\d{4}-\d{1,2}-\d{1,2}',    # YYYY-MM-DD
        ]
        
        for pattern in date_patterns:
            matches = re.findall(pattern, text)
            if matches:
                return matches[0]
        
        return None
    
    def _create_error_response(self, error_message: str, language: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ"""
        error_messages = {
            'uk': f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {error_message}",
            'ru': f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {error_message}",
            'de': f"Fehler bei der Dokumentenanalyse: {error_message}",
            'en': f"Error analyzing document: {error_message}"
        }
        
        return {
            "super_analysis": {
                "full_text": error_messages.get(language, error_messages['en']),
                "language": language,
                "analysis_type": "error",
                "sections": [],
                "insights": [],
                "action_items": [],
                "urgency_assessment": "unknown",
                "quality_score": 0.0
            },
            "summary": error_messages.get(language, error_messages['en']),
            "recommendations": [],
            "next_steps": []
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å—É–ø–µ—Ä-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
super_analysis_engine = SuperAnalysisEngine()